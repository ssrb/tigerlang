open Core
type linenum = int
type token = string
let _TYPE (i,j) = "TYPE   " ^ Int.to_string(i)
let _VAR (i,j) = "VAR   " ^ Int.to_string(i)
let _FUNCTION (i,j) = "FUNCTION   " ^ Int.to_string(i)
let _BREAK (i,j) = "BREAK   " ^ Int.to_string(i)
let _OF (i,j) = "OF   " ^ Int.to_string(i)
let _END (i,j) = "END   " ^ Int.to_string(i)
let _IN (i,j) = "IN   " ^ Int.to_string(i)
let _NIL (i,j) = "NIL   " ^ Int.to_string(i)
let _LET (i,j) = "LET   " ^ Int.to_string(i)
let _DO (i,j) = "DO   " ^ Int.to_string(i)
let _TO (i,j) = "TO   " ^ Int.to_string(i)
let _FOR (i,j) = "FOR   " ^ Int.to_string(i)
let _WHILE (i,j) = "WHILE   " ^ Int.to_string(i)
let _ELSE (i,j) = "ELSE   " ^ Int.to_string(i)
let _THEN (i,j) = "THEN   " ^ Int.to_string(i)
let _IF (i,j) = "IF   " ^ Int.to_string(i)
let _ARRAY (i,j) = "ARRAY   " ^ Int.to_string(i)
let _ASSIGN (i,j) = "ASSIGN   " ^ Int.to_string(i)
let _OR (i,j) = "OR   " ^ Int.to_string(i)
let _AND (i,j) = "AND   " ^ Int.to_string(i)
let _GE (i,j) = "GE   " ^ Int.to_string(i)
let _GT (i,j) = "GT   " ^ Int.to_string(i)
let _LE (i,j) = "LE   " ^ Int.to_string(i)
let _LT (i,j) = "LT   " ^ Int.to_string(i)
let _NEQ (i,j) = "NEQ   " ^ Int.to_string(i)
let _EQ (i,j) = "EQ   " ^ Int.to_string(i)
let _DIV (i,j) = "DIV   " ^ Int.to_string(i)
let _MUL (i,j) = "MUL   " ^ Int.to_string(i)
let _MINUS (i,j) = "MINUS   " ^ Int.to_string(i)
let _PLUS (i,j) = "PLUS   " ^ Int.to_string(i)
let _DOT (i,j) = "DOT   " ^ Int.to_string(i)
let _RBRACE (i,j) = "RBRACE   " ^ Int.to_string(i)
let _LBRACE (i,j) = "LBRACE   " ^ Int.to_string(i)
let _RBRACK (i,j) = "RBRACK   " ^ Int.to_string(i)
let _LBRACK (i,j) = "LBRACK   " ^ Int.to_string(i)
let _RPAREN (i,j) = "RPAREN   " ^ Int.to_string(i)
let _LPAREN (i,j) = "LPAREN   " ^ Int.to_string(i)
let _SEMICOLON (i,j) = "SEMICOLON   " ^ Int.to_string(i)
let _COLON (i,j) = "COLON   " ^ Int.to_string(i)
let _COMMA (i,j) = "COMMA   " ^ Int.to_string(i)
let _STRING (s,i,j) = "STRING("^s^")     " ^ Int.to_string(i)
let _INT (c,i,j) = "INT("^Int.to_string(c)^")   " ^ Int.to_string(i)
let _ID (s,i,j) = "ID("^s^")     " ^ Int.to_string(i)
let _EOF (i,j) = "EOF   " ^ Int.to_string(i)
let _COMMENT (i,j) = ()
