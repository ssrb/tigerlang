

%{
(* this is the header *)
%}



%term ASGNI
    | ADDI
    | CVCI
    | INDIRC
    | I0I
    | ADDRLP
    | CNSTI

%termprefix T_

%start stmt


%%

stmt:   ASGNI(disp,reg)		= stmt_ASGNI_disp_reg	(1);
stmt:   reg			= stmt_reg;
reg:    ADDI(reg,rc)		= reg_ADDI_reg_rc	(1);
reg:    CVCI(INDIRC(disp))	= reg_CVCI_INDIRC_disp	(1);
reg:    I0I			= reg_I0I;
reg:    disp			= reg_disp		(1);
disp:   ADDI(reg,con)		= disp_ADDI_reg_con;
disp:   ADDRLP			= disp_ADDRLP;
rc:     con			= rc_con;
rc:     reg			= rc_reg;
con:    CNSTI			= con_CNSTI;
con:    I0I			= con_I0I;



%%

module In = struct

  open BurmOps

  type tree =
  | ASGNI of tree * tree
  | ADDI of tree * tree
  | CVCI of tree
  | INDIRC of tree
  | I0I
  | ADDRLP of string
  | CNSTI of int

  let opchildren = function
    | ASGNI (t1,t2) -> (T_ASGNI, [t1,t2])
    | ADDI (t1,t2) ->  (T_ADDI, [t1,t2])
    | CVCI (t1) ->     (T_CVCI, [t1])
    | INDIRC (t1) ->   (T_INDIRC, [t1])
    | I0I ->           (T_I0I, [])
    | ADDRLP _ ->      (T_ADDRLP, [])
    | CNSTI _ ->       (T_CNSTI, [])

end




module Example = struct 

	module Burm = BurmGen (In)
	open In

	let say s = Core.Out_channel.print_string s

	let num = ref 1
	let inc iref = iref := !iref + 1
	let tmp s =  let t = !num in inc num; s ^ (Int.to_string t)

	let rec walk = function
	| (Burm.R_stmt_ASGNI_disp_reg (disp,reg), _) ->
		let (disp',reg') = (walk disp, walk reg) in
		let stmt = tmp "stmt" in
	  say (stmt^" <- ASGNI ("^disp'^" + "^reg'^")\n"); 
		stmt
  | (Burm.R_stmt_reg reg, _) ->
		let reg' = walk reg in
	  let stmt = tmp "stmt" in
	  say (stmt^" <- "^reg'^"\n"); 
		stmt
  | (Burm.R_reg_ADDI_reg_rc (reg,rc), _) ->
		let (reg',rc') = (walk reg, walk rc) in
	  let reg2 = tmp "reg" in
	  say (reg2^" <- ADDI ("^reg'^","^rc'^")\n"); 
		reg2
  | (Burm.R_reg_CVCI_INDIRC_disp disp, _) ->
		let disp' = walk disp in
	  let reg = tmp "reg" in
	  say (reg^" <- CVCI (INDIRC ("^disp'^"))\n"); 
		reg
  | (Burm.R_reg_I0I, _) ->
		let reg = tmp "reg" in
	  say (reg^" <- ZERO\n"); 
		reg
  | (Burm.R_reg_disp disp, _) ->
		let disp' = walk disp in
	  let reg = tmp "reg" in
	  say (reg^" <- "^disp'^"\n"); 
		reg
  | (Burm.R_disp_ADDI_reg_con (reg,con), _) ->
		let (reg',con') = (walk reg, walk con) in
	  let disp = tmp "disp" in
	  say (disp^" <- ADDI ("^reg'^","^con'^")\n"); 
		disp
  | (Burm.R_disp_ADDRLP, ADDRLP addr) ->
		let disp = tmp "disp" in
	  say (disp^" <- ADDRLP "^addr^"\n"); 
		disp
  | (Burm.R_rc_con con, _) ->
		let con' = walk con in
	  let rc = tmp "rc" in
	  say (rc^" <- "^con'^"\n"); 
		rc
  | (Burm.R_rc_reg reg, _) ->
		let reg' = walk reg in
	  let rc = tmp "rc" in
	  say (rc^" <- "^reg'^"\n"); 
		rc
  | (Burm.R_con_CNSTI, CNSTI i) ->
		let con = tmp "con" in
	  say (con^" <- CNSTI "^(Int.to_string i)^"\n"); 
		con
  | (Burm.R_con_I0I, _) ->
		let con = tmp "con" in
	  say (con^" <- CNSTI ZERO\n"); 
		con
  | _ -> (print "Error, bad match in walk\n"; raise Match)


  let doit t = walk (Burm.reduce t)

  (*
   * int p;
   * char c;
   * p = c+4;
   *)
  let a = ASGNI (ADDRLP "p",
		 ADDI (CVCI (INDIRC (ADDRLP "c")),
		       CNSTI 4))

end

